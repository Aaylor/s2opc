/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

REFINEMENT
    address_space_r
REFINES
    address_space

SEES
    constants,
    service_write_decode_bs

DEFINITIONS
    d_variables ==
        a_NodeId,
        a_NodeClass,
        a_Value,
        a_Value_StatusCode,

        /* Service Write */
        ResponseWrite_allocated,
        ResponseWrite_StatusCode
    ;

    d_inv ==
        /* Attributes */
        a_NodeId : t_Node >-> t_NodeId &
        a_NodeClass : t_Node --> t_NodeClass &

        a_Value : t_Node +-> t_Variant &
        dom(a_NodeClass|>{e_ncl_Variable}) <: dom(a_Value) &
        dom(a_Value) <: dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType}) &

        /* Value attribute meta-data */
        a_Value_StatusCode : t_Node +-> t_StatusCode &
        dom(a_Value_StatusCode) = dom(a_NodeClass|>{e_ncl_Variable}) &

        /* Service Write */
        ResponseWrite_allocated : BOOL &
        ResponseWrite_StatusCode : t_WriteValue +-> t_StatusCode
    ;

    d_init ==
        d_inv &
        ResponseWrite_allocated = FALSE &
        ResponseWrite_StatusCode = {}
ABSTRACT_VARIABLES
    d_variables

INITIALISATION
    d_variables :( d_init )

OPERATIONS

    /* --------------------------------------------------------------------- */
    /* Service Write */

    StatusCode_service <-- treat_write_request_WriteValues(userid) =
    BEGIN
        a_Value,
        StatusCode_service,
        ResponseWrite_StatusCode
        :(
            StatusCode_service : t_StatusCode_i &
            StatusCode_service : t_StatusCode &
            a_Value = a_Value$0 <+ ran({wvi, node, res
                |
                wvi : t_WriteValue &
                wvi : dom(WriteValue_NodeId) &
                wvi : dom(WriteValue_AttributeId) &
                WriteValue_NodeId(wvi) : ran(a_NodeId) &
                node = a_NodeId~(WriteValue_NodeId(wvi)) &
                /* For now, only the Value of the Variable can be modified */
                WriteValue_AttributeId(wvi) = e_aid_Value &
                a_NodeClass(node) = e_ncl_Variable &
                /* TODO: gestion du userid + AccessLevel/WriteMask */
                wvi : dom(WriteValue_Value) &
                /* TODO: vÃ©rifier le typage (avec DataType) */
                /* Check for multiplicity of the (node, aid) */
                card(WriteValue_NodeId~[{WriteValue_NodeId(wvi)}]
                     /* /\ WriteValue_AttributeId~[{WriteValue_AttributeId(wvi)}] */
                     ) = 1 &
                /* Get the value from the request */
                res = node |-> WriteValue_Value(wvi)
                }
            )
            &
            ResponseWrite_StatusCode = % wvi . (
                wvi : t_WriteValue
                |
                e_sc_ok
            )
        )
    END
    ;

    StatusCode_service <-- alloc_write_request_responses(nb_req) =
    BEGIN
        IF nb_req <= k_n_WriteResponse_max THEN
            ResponseWrite_StatusCode,
            ResponseWrite_allocated,
            StatusCode_service
            :(
                ResponseWrite_allocated : BOOL &
                ResponseWrite_StatusCode : t_WriteValue +-> t_StatusCode &
                (ResponseWrite_allocated = TRUE
                 =>
                 ResponseWrite_StatusCode = cast_t_WriteValue[1..nb_req] * {e_sc_nok} &
                 StatusCode_service = e_sc_ok) &
                (ResponseWrite_allocated = FALSE
                 =>
                 StatusCode_service = e_sc_nok)
            )
        ELSE
            ResponseWrite_StatusCode := {} ||
            ResponseWrite_allocated := FALSE ||
            StatusCode_service := e_sc_nok
        END
    END

END
