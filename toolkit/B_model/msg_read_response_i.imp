/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

IMPLEMENTATION msg_read_response_i
REFINES msg_read_response

IMPORTS
    msg_read_response_bs

SEES
    /* TODO: msg_read_request still necessary? */
    constants, 
    msg_read_request, 
    message_out_bs

DEFINITIONS
    d_inv_tab ==
    (
        StatusCode : t_StatusCode_i &
        tab_Value : t_ReadValue_i --> t_Variant_i &
        tab_StatusCode : t_ReadValue_i --> t_StatusCode_i &
        /*data_Value_SourceTimestamp : t_ReadValue_i +-> t_Timestamp &
        data_Value_ServerTimestamp : t_ReadValue_i +-> t_Timestamp */
        nb_resps_to_go : NAT &
        nb_resps_to_go <= k_n_read_resp_max
    )

CONCRETE_VARIABLES
    /* TODO: thanks to the iterator, it is not necessary to keep these tabs */
    tab_Value, /* Value field of the elements of response */
    tab_StatusCode, /* StatusCode field of the elements of response */
    StatusCode, /* StatusCode for the whole response (StatusCode for the service) */
    nb_resps_to_go, /* Number of response that are not written yet */
    msg /* Response message */

INVARIANT
    d_inv_tab &
    (
        /* Invariant de collage (one way only for now) */
        data_Value_Value = tab_Value |>> {c_Variant_indet} &
        data_Value_StatusCode = tab_StatusCode |>> {c_StatusCode_indet} &
        StatusCode = response_StatusCode
    )

INITIALISATION
    tab_Value := t_ReadValue_i * {c_Variant_indet};
    tab_StatusCode := t_ReadValue_i * {c_StatusCode_indet};
    StatusCode := c_StatusCode_indet;
    nb_resps_to_go := 0;
    msg := c_msg_indet

OPERATIONS
    continue <-- init_iterwrite_DataValue(a_nb_resps, resp_msg) =
    BEGIN
        StatusCode := e_sc_ok;
        tab_Value := t_ReadValue_i * {c_Variant_indet};
        tab_StatusCode := t_ReadValue_i * {c_StatusCode_indet};
        nb_resps_to_go := a_nb_resps;
        continue := bool(0 < a_nb_resps);
        msg := resp_msg;

        /* TODO: malloc may fail... */
        write_read_response_init(a_nb_resps, resp_msg)
    END
    ;

    continue <-- continue_iterwrite_DataValue(rvi, val, sc) =
    BEGIN
        IF val /= c_Variant_indet THEN
            tab_Value(rvi) := val
        END
        ;
        tab_StatusCode(rvi) := sc;
        IF 0 < nb_resps_to_go THEN
            nb_resps_to_go := nb_resps_to_go-1
        END;
        continue := bool(0 < nb_resps_to_go);

        write_read_response_iter(msg, rvi, val, sc)
    END
    ;

    write_response_error(sc, resp_msg) =
    BEGIN
        StatusCode := sc
        /* TODO: figure out where the StatusCode for the service should be written and who does that */
    END

END
