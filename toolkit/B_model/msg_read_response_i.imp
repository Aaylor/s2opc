/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

IMPLEMENTATION
    msg_read_response_i

REFINES
    msg_read_response

IMPORTS
    msg_read_response_bs

SEES
    /* TODO: msg_read_request still necessary? */
    constants, 
    msg_read_request, 
    message_out_bs

DEFINITIONS
    d_inv_tab ==
    (
        StatusCode : t_StatusCode_i &
        nb_resps_to_go : NAT &
        nb_resps_to_go <= k_n_read_resp_max
    )

CONCRETE_VARIABLES
    /* TODO: thanks to the iterator, it is not necessary to keep these tabs */
    response_StatusCode, /* StatusCode for the whole response (StatusCode for the service) */
    nb_resps, /* Number of response that are not written yet */
    response_msg /* Response message */

PROMOTES
    write_read_response_init,
    write_read_response
    
INITIALISATION
    response_StatusCode := c_StatusCode_indet;
    nb_resps            := 0;
    response_msg        := c_msg_indet

OPERATIONS

    write_response_error(sc, resp_msg) =
    BEGIN
        response_StatusCode := sc
        /* TODO: figure out where the StatusCode for the service should be written and who does that */
    END

END
