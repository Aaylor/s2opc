/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

IMPLEMENTATION
    service_read_i

REFINES
    service_read_r

DEFINITIONS
    "definitions.def"

SEES
    constants,
    address_space,
    message_in_bs,
    message_out_bs

IMPORTS
    msg_read_request,
    msg_read_response_bs,
    service_read_it

PROMOTES
    check_ReadRequest,
    alloc_read_response

LOCAL_OPERATIONS

    fill_read_response_1(p_resp_msg, p_isvalid, p_nid, p_aid, p_rvi) =
    PRE
        p_resp_msg : t_msg_i         &
        p_isvalid  : BOOL            &
        p_nid      : t_NodeId_i      &
        p_aid      : t_AttributeId_i &
        p_rvi      : t_ReadValue_i
    THEN
        data_Value_Value,
        data_Value_StatusCode
        :(data_Value_Value      : t_ReadValue +-> t_Variant    &
          data_Value_StatusCode : t_ReadValue +-> t_StatusCode &

          (p_isvalid = TRUE &
           p_nid : dom(a_NodeId~)
           =>
           data_Value_Value = data_Value_Value$0 <+
                              {p_rvi |-> AttributeID_Node_Variant(p_aid)(a_NodeId~(p_nid))} &
           (a_NodeClass(a_NodeId~(p_nid)) = e_ncl_Variable
            =>
            data_Value_StatusCode = data_Value_StatusCode$0 <+
                                    {p_rvi |-> a_Value_StatusCode(a_NodeId~(p_nid))}) &
           (not(a_NodeClass(a_NodeId~(p_nid)) = e_ncl_Variable)
            =>
            data_Value_StatusCode = data_Value_StatusCode$0 <+
                                    {p_rvi |-> e_sc_ok})) &
          (not(p_isvalid = TRUE &
               p_nid : dom(a_NodeId~))
           =>
           data_Value_Value = {p_rvi} <<| data_Value_Value$0 &
           data_Value_StatusCode = data_Value_StatusCode$0 <+
                                   {p_rvi |-> e_sc_nok})
         )
    END

OPERATIONS

    fill_read_response_1(p_resp_msg, p_isvalid, p_nid, p_aid, p_rvi) =
    VAR
        l_is_valid,
        l_node,
        l_ncl,
        l_value,
        l_sc
    IN
        IF  p_isvalid = TRUE & p_aid /= c_AttributeId_indet
        THEN
            l_is_valid, l_node <-- readall_AddressSpace_Node(p_nid);
            IF l_is_valid = TRUE THEN
                l_ncl, l_value <-- read_NodeClass_Attribute(l_node, p_aid);
                IF  p_aid = e_aid_Value &
                    l_ncl = e_ncl_Variable
                THEN
                    l_sc <-- get_Value_StatusCode(l_node)
                ELSE
                    l_sc := e_sc_ok
                END;
                set_read_response(p_resp_msg, p_rvi, l_value, l_sc);
                read_AddressSpace_free_value(l_value)
            ELSE
                /* Invalid at this level means the node Id is unknown:
                   node Id cannot be invalid in case p_is_valid = TRUE */
                set_read_response(p_resp_msg, p_rvi, c_Variant_indet, e_sc_bad_node_id_unknown)
            END
        ELSE
            IF p_nid = c_NodeId_indet THEN
                set_read_response(p_resp_msg, p_rvi, c_Variant_indet, e_sc_bad_node_id_invalid)
            ELSE
                /* It shall be p_aid = c_AttributeId_indet case */
                set_read_response(p_resp_msg, p_rvi, c_Variant_indet, e_sc_bad_attribute_id_invalid)
            END
        END
    END
    ;

    fill_read_response(req_msg, resp_msg) =
    VAR
        l_nb_ReadValue,
        l_continue,
        l_isvalid,
        l_rvi,
        l_nid,
        l_aid
    IN
        l_nb_ReadValue <-- get_nb_ReadValue;
        l_continue <-- init_iter_write_request(l_nb_ReadValue);
        WHILE l_continue = TRUE DO
            l_continue, l_rvi <-- continue_iter_write_request;
            l_isvalid, l_nid, l_aid <-- getall_ReadValue_NodeId_AttributeId(req_msg, l_rvi);
            fill_read_response_1(resp_msg, l_isvalid, l_nid, l_aid, l_rvi)
        INVARIANT
            rreqs_to_iterate <: t_ReadValue &
            rreqs_iterated   <: t_ReadValue &
            rreqs_to_iterate /\ rreqs_iterated = {} &
            rreqs_to_iterate \/ rreqs_iterated = cast_t_ReadValue[1..nb_ReadValue] &
            l_continue = bool(rreqs_to_iterate /= {}) &
            
            data_Value_Value =
            %rvi.(rvi : t_ReadValue &
                  rvi : rreqs_iterated &
                  rvi : dom(ReadValue_NodeId) &
                  ReadValue_NodeId(rvi) : dom(a_NodeId~) &
                  rvi : dom(ReadValue_AttributeId) &
                  a_NodeId~(ReadValue_NodeId(rvi)) : dom(AttributeID_Node_Variant(ReadValue_AttributeId(rvi)))
                  |
                  AttributeID_Node_Variant(ReadValue_AttributeId(rvi))(a_NodeId~(ReadValue_NodeId(rvi)))
                 ) &

            data_Value_StatusCode =
            %rvi.(rvi : t_ReadValue &
                  rvi : rreqs_iterated
                  |
                  {FALSE |-> e_sc_nok,
                   TRUE  |->
                             {FALSE |-> e_sc_ok,
                              TRUE  |-> a_Value_StatusCode(a_NodeId~(ReadValue_NodeId(rvi)))}
                             (bool(ReadValue_AttributeId(rvi) = e_aid_Value &
                                   a_NodeClass(a_NodeId~(ReadValue_NodeId(rvi))) = e_ncl_Variable))}
                  (bool(rvi : dom(data_Value_Value)))
                 )
        VARIANT
            card(rreqs_to_iterate)
        END
    END

END
