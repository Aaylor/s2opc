/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

IMPLEMENTATION service_read_i
REFINES service_read

SEES
    constants,
    address_space,
    message_in_bs,
    message_out_bs

IMPORTS
    msg_read_request,
    msg_read_response

OPERATIONS
    treat_read_request(req_msg, resp_msg) =
    VAR
        ii, rvi,
        l_nb_ReadValue,
        l_isvalid,
        l_node, l_aid,
        l_value, l_ncl, l_sc,
        l_continue
    IN
        l_isvalid <-- read_ReadRequest(req_msg);
        IF l_isvalid = TRUE THEN
            l_nb_ReadValue <-- read_nb_ReadValue;
            l_continue <-- init_iterwrite_DataValue(l_nb_ReadValue, resp_msg);
            ii := 0;
            WHILE l_continue = TRUE DO
                ii := ii+1;
                /* To determine which StatusCode is sent, we need the NodeClass:
                 *  the StatusCode associated to the Value attribute of a Variable is the one in the AddressSpace.
                 * TODO: UserAccessLevel
                 * TODO: To determine which timestamp are returned, we need the timestampsToReturn of the request.
                 */
                /* Récup la ième requête : NodeId, AttrId */
                rvi <-- read_cast_t_ReadValue(ii);
                l_isvalid, l_node, l_aid <-- readall_ReadValue_Node_AttributeId(rvi);
                IF l_isvalid = TRUE THEN /* Note: une opération locale permettrait de simplifier la preuve */
                    l_ncl, l_value <-- read_NodeClass_Attribute(l_node, l_aid);
                    IF l_aid = e_aid_Value & l_ncl = e_ncl_Variable THEN
                        l_sc <-- read_Value_StatusCode(l_node)
                    ELSE
                        l_sc := e_sc_ok
                    END
                    ;
                    l_continue <-- continue_iterwrite_DataValue(rvi, l_value, l_sc);
                    read_AddressSpace_free_value(l_value)
                ELSE
                    /* TODO: split in two different noks (nodeId/attrId invalid) */
                    l_continue <-- continue_iterwrite_DataValue(rvi, c_Variant_indet, e_sc_nok)
                END
            INVARIANT
                ii : 0..l_nb_ReadValue
            VARIANT
                l_nb_ReadValue-ii
            END
        ELSE
            write_response_error(e_sc_nok, resp_msg)
        END
    END

END
