/*
 *  Copyright (C) 2018 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

IMPLEMENTATION
    session_core_2_i

REFINES
    session_core_2

SEES
    constants,
    request_handle_bs,
    message_out_bs,
    message_in_bs,
    channel_mgr

CONCRETE_VARIABLES
    s_session_i,
    a_state_i,
    a_channel_i,
    a_orphaned_i
    
INVARIANT
    s_session_i  : t_session_i --> BOOL                   &
    a_state_i    : t_session_i --> t_sessionState         &
    a_channel_i  : t_session_i --> t_channel_i            &
    a_orphaned_i : t_session_i --> t_channel_config_idx_i &

    s_session   = t_session /\ s_session_i~[{TRUE}]       &
    a_state     = t_session <| a_state_i                  &
    a_channel   = t_session <| a_channel_i  |> t_channel  &
    a_orphaned  = t_session <| a_orphaned_i |> t_channel_config_idx

INITIALISATION
    s_session_i  := t_session_i * {FALSE};
    a_state_i    := t_session_i * {e_session_closed};
    a_channel_i  := t_session_i * {c_channel_indet};
    a_orphaned_i := t_session_i * {c_channel_config_idx_indet}

OPERATIONS

    add_session(p_session) =
    BEGIN
        s_session_i(p_session) := TRUE
    END
    ;

    remove_session(p_session) =
    BEGIN
        s_session_i(p_session) := FALSE
    END
    ;
    
    reset_session_channel(p_session) =
    BEGIN
        a_channel_i(p_session) := c_channel_indet
    END
    ;
    
    reset_session_orphaned(p_session) =
    BEGIN
        a_orphaned_i(p_session) := c_channel_config_idx_indet
    END
    ;
   
    ret <-- is_valid_session (session) =
    BEGIN
        ret := s_session_i(session)
    END
    ;

    state <-- get_session_state (session) =
    BEGIN
        state := a_state_i(session)
    END
    ;

    set_session_state_1(p_session, p_state) =
    BEGIN
        a_state_i(p_session) := p_state
    END
    ;

    set_session_channel (session, channel) =
    BEGIN
        a_channel_i(session) := channel
    END
    ;

    p_dom, p_channel <-- getall_session_channel (p_session) =
    BEGIN
        p_channel := a_channel_i(p_session);
        p_dom <-- is_t_channel(p_channel)
    END
    ;
    
    channel <-- get_session_channel (session) =
    BEGIN
        channel := a_channel_i(session)
    END
    ;

    p_dom, p_channel_config_idx <-- getall_orphaned(p_session) =
    BEGIN
        p_channel_config_idx := a_orphaned_i(p_session);
        p_dom <-- is_t_channel_config_idx(p_channel_config_idx)
    END
    ;

    set_session_orphaned_1(p_session, p_channel_config_idx) =
    BEGIN
        a_orphaned_i(p_session) := p_channel_config_idx
    END

END
