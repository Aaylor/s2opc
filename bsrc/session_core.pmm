/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

THEORY User_Pass IS
ff(0) & dd(0) & pr(Tac(LinkedRelations; InPOWTryXY));
ff(0) & d0 & pr(Tac(th_simp_overload; InPOWLeavesXY));
ff(0) & dd(0) & ar(th_simp_overload) & ar(SimplifyRelDomXY.15,Goal) & ar(InPOWTryXY);
ff(0) & dd(0) & ar(LinkedRelations) & mp & mp & eh(dom(a_channel)) & pr;
ff(0) & dd(0) & ar(LinkedRelations) & mp & mp & eh(dom(a_user)) & pr;
ff(0) & mp & pp(rt.1)
END

&

THEORY LinkedRelations IS
    not(x : dom(s|>>L)) &
    blvar(Q) & Q \ (x,s,L)
    =>
    dom(s|>>L) - {x} == dom(s|>>L)
;
    binhyp(s(x) : Z) &
    Z /\ L = {} &
    blvar(Q) & Q \ (s,x,Z,L)
    =>
    dom(s|>>L) \/ {x} == dom(s|>>L)
;
    binhyp(s(x) = z) &
    not(z : L) &
    blvar(Q) & Q \ (s,x,z,L)
    =>
    dom(s|>>L) \/ {x} == dom(s|>>L)
;
    binhyp(s(x) = z) &
    z : L &
    blvar(Q) & Q \ (s,x,z,L)
    =>
    dom(s|>>L) - {x} == dom(s|>>L)
;
    binhyp(s(x) : Z) &
    Z /\ L = {} &
    blvar(Q) & Q \ (s,x,Z,L)
    =>
    dom(s|>L) - {x} == dom(s|>L)
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>>L) == dom(s|>>L) \/ x
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>>L) == dom(s|>>L) - x
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>>L) == dom(s|>>L) \/ {x}
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>>L) == dom(s|>>L) - {x}
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>L) == dom(s|>L) - x
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+(x*{y})|>L) == dom(s|>L) \/ x
;
    not(y : L) &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>L) == dom(s|>L) - {x}
;
    bsearch({y}, (L\/?), n) &
    y : L &
    blvar(Q) & Q \ (y,L)
    =>
    dom(s<+{x|->y}|>L) == dom(s|>L) \/ {x}
END

&

THEORY th_simp_overload IS
    
    dom(r<+s) == dom(r)\/dom(s)
/*    ;
    a<+{b|->c}|>>{d,e} == */
    ;
    bnum(c) &
    bnum(e) &
    bnot(btest(c = e))
    =>
    a<+{b|->(c|->E)}|>{e|->E} == a|>{e|->E} <+ {b|->(c|->E)}
    
END

