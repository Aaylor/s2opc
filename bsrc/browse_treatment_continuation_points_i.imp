/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    browse_treatment_continuation_points_i
REFINES
    browse_treatment_continuation_points
IMPORTS
    browse_treatment_continuation_points_bs
SEES
    constants,
    session_mgr

OPERATIONS

    bres, p_ContinuationPoint <-- create_continuation_point (p_session, p_nextIndex, p_maxTargetRef, p_browseView,
                                                             p_nodeId, p_browseDirection, p_referenceType,
                                                             p_includeSubtypes, p_nodeClassMask, p_resultMask) =
    BEGIN
        p_ContinuationPoint := c_ContinuationPoint_indet;
        bres <-- is_valid_session (p_session);
        IF bres = TRUE THEN
            /* TODO: call base machine for actual creation + implement session_ContinuationPoint array to store it */
            bres, p_ContinuationPoint <-- create_continuation_point_bs (p_nextIndex, p_maxTargetRef, p_browseView, p_nodeId,
                                                                        p_browseDirection, p_referenceType, p_includeSubtypes,
                                                                        p_nodeClassMask, p_resultMask);
            bres := FALSE
        END
    END
    ;

    bres, p_nextIndex, p_maxTargetRef, p_browseView, p_nodeId,
    p_browseDirection, p_referenceType, p_includeSubtypes, p_nodeClassMask, p_resultMask
      <-- getall_and_clear_continuation_point (p_session, p_continuationPoint) =
    BEGIN
        // TODO: remove, only avoid unused param
        bres <-- is_valid_session (p_session);
        unused_continuationPoint(p_continuationPoint);

        bres := FALSE;
        p_nextIndex := 0;
        p_maxTargetRef := 0;
        p_browseView := c_NodeId_indet;
        p_nodeId := c_NodeId_indet;
        p_browseDirection := e_bd_indet;
        p_referenceType := c_NodeId_indet;
        p_includeSubtypes := FALSE;
        p_nodeClassMask := c_BrowseNodeClassMask_indet;
        p_resultMask := c_BrowseResultMask_indet
    END
    ;

    set_session_closed (p_session) =
    VAR
        l_res
    IN
        // TODO: remove (only avoid unused param) + clear session continuation point
        l_res <-- is_valid_session (p_session)
    END
    ;

    continuation_points_UNINITIALISATION =
    BEGIN
        skip
    END

END
