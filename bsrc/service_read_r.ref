/*
 *  Copyright (C) 2017 Systerel and others.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

REFINEMENT
    service_read_r

REFINES
    service_read

SEES
    constants,
    address_space,
    message_in_bs,
    message_out_bs

DEFINITIONS
    "definitions.def";
    d_inv_read == (
        nb_ReadValue          : NAT                           &
        nb_ReadValue         <= k_n_read_resp_max             &
        ReadValue_NodeId      : t_ReadValue +-> t_NodeId      &
        ReadValue_AttributeId : t_ReadValue +-> t_AttributeId
    )
    ;
    d_inv_response == (
        data_Value_Value : t_ReadValue +-> t_Variant &
        data_Value_StatusCode : t_ReadValue +-> t_StatusCode /*&
        data_Value_SourceTimestamp : set_read_elements +-> t_Timestamp &
        data_Value_ServerTimestamp : set_read_elements --> t_Timestamp*/
    )

ABSTRACT_VARIABLES
    nb_ReadValue,
    ReadValue_NodeId,
    ReadValue_AttributeId,
    data_Value_Value,
    data_Value_StatusCode

INVARIANT
    d_inv_read &
    d_inv_response

INITIALISATION
    nb_ReadValue          := 0  ||
    ReadValue_NodeId      := {} ||
    ReadValue_AttributeId := {} ||
    data_Value_Value      := {} ||
    data_Value_StatusCode := {}

OPERATIONS

    p_read_ok, p_nb_ReadValue, p_tsToReturn <-- check_ReadRequest(p_msg) =
    BEGIN
        p_read_ok,
        p_nb_ReadValue,
        p_tsToReturn,
        nb_ReadValue,
        ReadValue_NodeId,
        ReadValue_AttributeId
        :(  p_read_ok      : BOOL & /* Error code, for now a simple Bool */
            p_nb_ReadValue : INT  &
            p_tsToReturn   : t_TimestampsToReturn_i &
            d_inv_read            &
            (p_read_ok = TRUE
             =>
             p_nb_ReadValue = nb_ReadValue &
             p_tsToReturn : t_TimestampsToReturn)
        )
    END
    ;

    fill_read_response(req_msg, resp_msg) =
    BEGIN
        data_Value_Value,
        data_Value_StatusCode
        :(
            /* TODO: It would be nice to specify that a response is always sent, even when there is an error */
            data_Value_Value : t_ReadValue +-> t_Variant &
            data_Value_Value =
                %rvi.(rvi : t_ReadValue &
                      rvi : cast_t_ReadValue[1..nb_ReadValue] &
                      /* ith node id has a node in the Address Space */
                      rvi : dom(ReadValue_NodeId) &
                      ReadValue_NodeId(rvi) : dom(a_NodeId~) &
                      /* Node is in the domain of the attribute */
                      rvi : dom(ReadValue_AttributeId) &
                      a_NodeId~(ReadValue_NodeId(rvi)) : dom(AttributeID_Node_Variant(ReadValue_AttributeId(rvi)))
                      /* TODO: add use-access levels */
                      |
                      AttributeID_Node_Variant(ReadValue_AttributeId(rvi))(a_NodeId~(ReadValue_NodeId(rvi)))
                     ) &

            data_Value_StatusCode : t_ReadValue +-> t_StatusCode &
            data_Value_StatusCode =
                %rvi.(rvi : t_ReadValue &
                      rvi : cast_t_ReadValue[1..nb_ReadValue]
                      |
                      /* TODO: split in two different noks (nodeId invalid, or attrId invalid) */
                      {FALSE |-> e_sc_bad_internal_error,
                       TRUE  |->
                                 {FALSE |-> e_sc_ok,
                                  TRUE  |-> a_Value_StatusCode(a_NodeId~(ReadValue_NodeId(rvi)))}
                                 (bool(ReadValue_AttributeId(rvi) = e_aid_Value &
                                       rvi : dom(ReadValue_NodeId) &
                                       ReadValue_NodeId(rvi) : dom(a_NodeId~) &
                                       a_NodeClass(a_NodeId~(ReadValue_NodeId(rvi))) = e_ncl_Variable))}
                      (bool(rvi : dom(data_Value_Value)))
                     )

            /*(!ii.ii : dom(data_Value_Value) & ReadValue_Node(ii) : dom(att(ReadValue_AttributeId(ii)))
                => data_Value_Value(ii) = att(ReadValue_AttributeId(ii))(ReadValue_Node(ii)) ) &
            data_Value_StatusCode : set_read_elements --> t_StatusCode &
            data_Value_SourceTimestamp
            data_Value_ServerTimestamp */
        )
    END

END
