INGOPCS OPC UA stack
====================

This project contains the following elements:
- src/: source files of the INGOPCS project OPC UA stack (client side
  only)
- lib/mbedtls-2.3.0: source files of mbedtls cryptographic library
- test/ingopcs: unit tests on the stack
- stub_client: define a client side simple use case of the stack (to
  be runned faced to stub server)
- stub_server: define a server side simple use case of the stack
- cert: certificates and keys as client / server using an internal CA
- Makefile*: makefile compiling internal tests and stack code (not as
  a library)
- build: compiled files during make execution
- build_platform: platform dependant compiled files during make
  execution
- out: built internal tests executables, certificates and keys
  necessary for execution
- apidoc/html: generated code documentation in HTML format

Licenses: 
- Unless specifically indicated otherwise in a file, INGOPCS files are
licensed under the GNU AFFERO GPL v3 license, as can be found in:
agpl-3.0.txt
- OPC UA stack code generated with the OPC foundation code generator
  tool (UA-ModelCompiler) is distributed under the OPC Foundation MIT
  License 1.00
- The mbedtls library is also distributed under the Apache 2.0 license

Compilation (Linux, tested under Ubuntu 14.04):
- Pre-requesites: 
  * gcc (tested with GCC version >= 4.8.4)
  * make (tested with GNU Make version >= 3.81)
  * Check library (https://libcheck.github.io/check/)
- To compile the stack as a simple client use case, and unit tests:
  execute the "make" command

Compilation options:
- STACK_1_01 or STACK_1_02 or STACK_1_03 (active by default): one of
  the options could be activated to adapt wrapper for foundation API
  on foundation stack version (1.01, 1.02 or 1.03) 
- WRAPPER_RECEPTION_THREAD (not active by default): activate a global
  reception thread in the stack in charge of calling the socket
  manager loop to treat received data on sockets. Necessary when using
  a multi-threaded server SDK on top of the INGOPCS stack.
To use those options, it is necessary to define thoses options 
as variables on compilation, e.g.: 
"make STACK_1_01=ANY WRAPPER_RECEPTION_THREAD=VALUE"

Documentation generation:
- Pre-requesite: doxygen
- To generate the documentation: execute the "make doc" command
- Documentation generated in apidoc/ and explored with a web-browser
  from file apidoc/html/index.html

To run the unit tests of the stack:
- Compile the stack and tests
- Execute the test-all.sh script
- Check results in out/results.tap files

Tests are covering the following cases:
- Unit tests: cryptographic library and tools used by the stack
- Client/Server simple use case:
  * Client side (stub_client_ingopcs):
    > Client requests to open a secure channel with security policy
      Basic256Sha256 and in SignAndEncrypt mode
    > If request is accepted, the client send a GetEndpoints request and
      checks the response received (a server stub will respond with a
      service fault since it does not really implement the service)
  * Server side (stub_server_ingopcs):
    > Server opens an endpoint with security policy Basic256Sha256 and
      in SignAndEncrypt mode and wait for connections from one client
    > On client connection and reception of an open a secure channel
      request, it responds with an open secure channel response and
      keep the secure channel opened
    > On reception of a service request on the opened secure channel
      it responds with default service implementation (service fault)  
    > When TCP connection is closed by client it stops.
