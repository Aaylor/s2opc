INGOPCS OPC UA communication Stack and Toolkit
==============================================

This project provides a C source code implementation of the OPC UA
communication stack, B model and C source code implementation of a
minimal OPC UA Toolkit and a cryptographic library.

Those elements are provided in the following directories:
- stack: the OPC UA Stack source code, unit tests and example tests
- toolkit: the OPC UA Toolkit model, source code and example tests
- toolkit/address_space_generation: XSL script for address space generation 
  and already generated address space for tests
- libraries: the cryptographic libraries provided (only mbedtls)
- validation: validation test of server using FreeOpcUa python client
- bin: test binaries for OPC UA Stack and Toolkit (Linux 64 bits only)
- install_stack: local installation of the OPC UA stack static library
  and headers

Licenses:
- Unless specifically indicated otherwise in a file, INGOPCS files are
licensed under the GNU AFFERO GPL v3 license, as can be found in:
agpl-3.0.txt
- OPC UA Stack code generated with the OPC foundation code generator
  tool (UA-ModelCompiler) is distributed under the OPC Foundation MIT
  License 1.00
- The mbedtls library is also distributed under the Apache 2.0 license

INGOPCS OPC UA Stack features
=============================
- Client side:
  * Opens a TCP UA connection: sends HELLO and handles ACK reply,
  * Opens a Secure Channel: sends a OpenSecureChanel (OPN) request,
    handles response from server,
  * Security modes: None, Sign or SignAndEncrypt,
  * Sends request messages for the OPC UA services, accepts responses,
    decrypts them, and transmit them to the application,
  * Wrappers (binary compatibility) for foundation OPC UA foundation
    Stack API (no wrapper for encryption services used inside the stack).

- Server side:
  * Open a TCP UA listener: wait for TCP connection, then handles
    HELLO and sends ACK reply,
  * Opens a Secure Channel: check received OpenSecureChanel (OPN)
    request and sends OPN response,
  * Security modes: None, Sign or SignAndEncrypt,
  * Check reception of OPC UA services requests and trigger the
    application configured service treatment and response sending,
  * Wrappers (binary compatibility) for foundation OPC UA foundation
    Stack API (no wrapper for encryption services used inside the stack).

- Available security policy (encryption schemes):
  * http://opcfoundation.org/UA/SecurityPolicy#None,
  * http://opcfoundation.org/UA/SecurityPolicy#Basic256,
  * http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256.

INGOPCS OPC UA Toolkit features
===============================
- Common features:
  * Asynchronous user application API for introduction of new architecture
  * Available security policy (encryption schemes) with any security mode:
    > http://opcfoundation.org/UA/SecurityPolicy#None,
    > http://opcfoundation.org/UA/SecurityPolicy#Basic256,
    > http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256.

- Client side (e.g.: toolkit/src/test/toolkit_test_client.c):
  * 1 Secure Channel configuration on Toolkit initialization
  * Activate a session with an anonymous user
  * Send a read request
  * Send a write request
  * Send a browse request

- Server side (e.g.: toolkit/src/test/toolkit_test_server.c):
 * 1 Endpoint configuration on Toolkit initialization
 * Address space generation and configuration on Toolkit intiialization:
   > XSL script to generate a C code address space structure from XML
     complying with https://opcfoundation.org/UA/schemas/1.03/UANodeSet.xsd
     and with generation restrictions (e.g.: no array of values, etc.)
   > Generated address spaces for validation tests
 * Accepts activation of a session with an anonymous user
 * Accepts to treat one service request at the same time:
   > Read service
   > Write service
   > Browse service (simplified: no continuation point)
   > GetEndpoints service (simplified: create session fields + server certificate)

INGOPCS OPC UA Stack and Toolkit tests
======================================
Compilation (Linux, tested under Ubuntu 14.04):
- Pre-requesites:
  * gcc (tested with GCC version >= 4.8.4)
  * make (tested with GNU Make version >= 3.81)
  * Check library (https://libcheck.github.io/check/ version >= 0.10.0)
- To compile the INGOPCS OPC UA Stack static library and INGOPCS OPC
  UA Toolkit: execute the "make" command
- The OPC UA stack library installation files are generated in
  install_stack/ directory and all test binaries (and configuration
  files) are generated into bin/ directory

Run all tests:
- To (compile and) run the INGOPCS OPC UA Stack and INGOPCS OPC UA
  Toolkit tests: execute the test-all.sh script: "./test-all.sh LOCAL"
- Tests results are provided in bin/\*.tap files and shall indicate
  "Passed" status for each test

Run a particular test (bin/ directory):
- OPC UA Stack unit tests: execute ./check_stack
- OPC UA Stack client/server example: execute ./stub_server_ingopcs
  and then ./stub_client_ingopcs in parallel
- OPC UA Toolkit read service test: execute ./toolkit_test_read
- OPC UA Toolkit write service test: execute ./toolkit_test_write
- OPC UA Toolkit client/server session and read/write service example:
  execute ./toolkit_test_server and then ./toolkit_test_client in parallel
- OPC UA toolkit server and read / write / browse service validation:
  execute ./toolkit_test_server and python3 client.py in validation/ directory
  (depends on FreeOpcUa python client available on github)
