Error-003-Read all available attributes from a single (valid) node, in a single call.
Error-004-Read multiple attributes from a valid node with maxAge = 0.
Error-012-Read all available attributes from multiple valid nodes of each different node type, in a single call.
Error-017-Read: Read a single attribute that is not 'Value'. Cycle through AccessLevel, BrowseName, DataType, DisplayName, Historizing, 
Error-028-Read attributes (not Value); sourceTimestamp=null; serverTimestamp is valid.
Error-011-Read: NodesToRead array is empty.
Error-014-Read: Negative MaxAge parameter. Returns Bad_MaxAgeInvalid.
Error-019-Read: Specify an invalid TimestampsToRead value. Expects Bad_TimestampsToReturnInvalid.
Error-001-Write: Empty nodesToWrite array.
Error-004-Write: to Value and DisplayName attributes, on multiple invalid Nodes.
Error-008-Write: Write a value using the wrong data-type.
Error-002-GetEndpoints: Provide a list of supported locales.
Error-003-GetEndpoints: Provide a list of ProfileUris.
Error-004-GetEndpoints: Mix supported and unsupported locale ids.
Error-008-GetEndpoints: EndpointUrl contains unknown hostname
Error-010-GetEndpoints: EndpointUrl contains a string that is not syntacticly a URL.
Error-011-GetEndpoints: unsupported profile URIs.
Error-012-GetEndpoints: Repeat test -010 100-times, in less than 10-seconds.
Error-013-GetEndpoints: ServerUri is identical in all areas (FindServers, GetEndpoints, Certificates etc.)
Error-001-GetEndpoints: EndpointUrl=null
Error-002-FindServers: Provide endpoint description Url with an unknown hostname.
Error-005-FindServers: Provide a list of locales not conforming to RFC 3066.
Error-008-FindServers: EndpointUrl is a string but not syntactically a URL.
Error-009-FindServers: repeat -014 100-times within 10-seconds.
Error-002-CreateSession: Create and Activate a session and stall the session to cause it to timeout.
Error-005-ActivateSession: Specify numerous LocaleIds in a ranked order.
Error-008-ActivateSession: Call activateSession on a session that has been transferred to a different Channel.
Error-004-CreateSession: Create the session but do not activate it before calling another service.
Error-009-ActivateSession: Specify a UserIdentityToken type that is not supported.
Error-006-Browse: Should return references matching the node class as specified by the NodeClassMask.
Error-008-Browse: Should browse multiple nodes with a mix of valid and invalid node IDs.
Error-018-Browse: Should return non-null Reference Description fields for all node classes except Object and Variable. For Object and 
Error-027-Browse: Should return diagnostic info as specified by the returnDiagnostics bit  mask.
Error-028-Browse: Should not return diagnostics when returnDiagnostics is 0.
Error-001-Browse: Should return operation result Bad_NodeIdInvalid when the node ID in NodeToBrowse has invaild syntax.
Error-002-Browse: Should return operation error Bad_NodeIdUnknown when the node to browse is not in the address space.
Error-008-Browse: Should return Bad_NothingToDo when nodesToBrowse[] is empty.
Error-001-Browse: Should return operation result Bad_NoContinuationPoints when no more continuation points can be allocated or the 
Error-001-RegisterNodes: Should return a node that refers to NodesToRegister[0].
Error-002-RegisterNodes: Should return five nodes that refer to the five NodesToRegister.
Error-003-RegisterNodes: Should return 25 nodes that refer to the 25 NodesToRegister.
Error-004-RegisterNodes: Should return 50 nodes that refer to the 50 NodesToRegister.
Error-005-RegisterNodes: RegisterNodes: Should return 100 nodes that refer to the 100 NodesToRegister.
Error-006-RegisterNodes: Should return 20 nodes when the same node is registered 20 times.
Error-007-RegisterNodes: Should return five nodes when three existing and two non-existent nodes are registered.
Error-011-UnregisterNodes: Should return Good service result when unregistering a registered node.
Error-012-UnregisterNodes: Should return Good service result when unregistering five registered nodes.
Error-016-UnregisterNodes: Should return Good service result when unregistering three registered nodes and two unregistered nodes.
Error-017-UnregisterNodes: Should return Good service result when unregistering three registered nodes and two non-existent nodes.
Error-021-UnregisterNodes: Should return Good service result when unregistering an unregistered node.
Error-023-UnregisterNodes: Should not unregister a registered node when the "source" node is unregistered.
Error-003-RegisterNodes: Should return the non-existent NodeId when the node does not exist.
Error-004-RegisterNodes: Should return non-existent NodeIds when the 500 nodes do not exist.
Error-005-RegisterNodes: specify invalid NodeId; expected Bad_NodeIdInvalid.
Error-006-RegisterNodes: mix of valid and invalid nodes. Expects Bad_InvalidNodeId.
Error-007-RegisterNodes: Should return service error Bad_SecurityChecksFailed when authenticationToken is null.
Error-008-RegisterNodes: Should return Bad_SecurityChecksFailed when the authenticationToken does not exist.
Error-009-RegisterNodes: Should return BadInvalidTimestamp when the RequestHeader.Timestamp is too far out of range.
Error-011-UnregisterNodes: Should return Bad_NothingToDo when there are no nodes to unregister.
Error-012-UnregisterNodes: Should return service error Bad_SecurityChecksFailed when authenticationToken is null.
Error-013-UnregisterNodes: Should return Bad_SecurityChecksFailed when the authenticationToken does not exist.
Error-014-UnregisterNodes: Should return BadInvalidTimestamp when the RequestHeader.Timestamp is too far out of range.
