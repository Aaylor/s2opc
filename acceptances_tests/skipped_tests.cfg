Skipped|022|Read: Arrays of each data type (basic types)
Skipped|023|Read: Arrays of each data-type to be read from multiple Nodes in a single call.
Skipped|024|Read: Arrays, read one node of each data type specifying an IndexRange retrieving 2nd element only.
Skipped|025|Read: Arrays of various data types from multiple Nodes (in a single call) using IndexRange 2-4.
Skipped|026|Read: Arrays of various data types from multiple Nodes (in a single call) using IndexRange 'last 3 items'.
Skipped|012|Read: IndexRange is out of bounds of the what the array supports. Each core data-type is tested. Expect "Bad_IndexRangeNoData.
Skipped|013|Read: IndexRange invalid syntax (negative number), for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|016|Read: a node that is write-only (and not readable)
Skipped|022|Read: IndexRange invalid syntax, for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|023|Read: IndexRange invalid syntax (both digits are same), for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|024|Read: IndexRange invalid (text is backwards) for each data-type.
Skipped|initialize|Attribute Write Index
Skipped|004|Write: AccessLevel = CurrentWrite. Expects "Good".
Skipped|007|Write: ByteString to a Byte[]. Expects success.
Skipped|009|Write: LocalizedText; write to all, some, and no parameters of this structure type.
Skipped|011|Write: Write values that are the 'subtype' of a UInteger.
Skipped|012|Write: Write() a value of NaN to all configured floating point numbers
Skipped|007|Write: to a node whose AccessLevel is Read Only. Expect Bad_NotWritable.
Skipped|010|Write: UInteger type receives values of incorrect sub-type.
Skipped|011|Write: Integer receives values of incorrect sub-type.
Skipped|012|Write: Integer receives value of incorrect sub-type.
Skipped|015|Write: LocalizedText with non-existent Locale.
Skipped|001|Check ValueAsText property on ALL configured nodes
Skipped|009|GetEndpoints: Multi-homed with multiple names.
Skipped|010|FindServers: multi-homed PC returns endpoints based on IP/hostname filter.
Skipped|007|ActivateSession: Specify different user-credentials activating an already active session.
Skipped|010|ActivateSession: Specify user login credentials that do not have sufficient privileges.
Skipped|001|Browse: ReferenceTypeId=<null> returns ALL references.
Skipped|002|Browse: Should browse references in the forward direction.
Skipped|003|Browse: Should browse for references in the inverse direction.
Skipped|004|Browse: Should return references of the specified ReferenceTypeId (without subtypes) when the ReferenceTypeId matches a reference.
Skipped|005|Browse: Should return references of the specified ReferenceTypeId and its subtypes when the ReferenceTypeId matches a reference.
Skipped|009|Browse: Should return all references when NodeClassMask is 0.
Skipped|010|Browse: Should return only the one Reference Description field specified by the ResultMask.
Skipped|015|Browse: Should return references of the specified ReferenceTypeId (without subtypes) when the ReferenceTypeId matches a parent 
Skipped|016|Browse: Should return references of the specified ReferenceTypeId and its subtypes when the ReferenceTypeId matches the parent 
Skipped|017|Browse: Should return references of node class View.
Skipped|019|Browse: Should return the Reference Description fields  specified by the ResultMask.
Skipped|020|Browse: Should return references of the specified ReferenceTypeId and its recursive subtypes when the ReferenceTypeId matches 
Skipped|003|Browse: Should return operation result BadBrowseDirectionInvalid when the BrowseDirection is invalid.
Skipped|004|Browse: Should return operation result BadViewIdUnknown when the View does not exist.
Skipped|006|Browse: Should return operation result Bad_ReferenceTypeIdInvalid when ReferenceTypeId does not exist.
Skipped|009|Browse: Should return operation result Bad_ViewIdUnknown when the specified View does not exist.
Skipped|010|Browse: Should return operation result Bad_ReferenceTypeIdInvalid when ReferenceTypeId is a node that is not a reference 
Skipped|015|Browse: Should return service error Bad_SecurityChecksFailed when authenticationToken is null.
Skipped|016|Browse: Should return Bad_SecurityChecksFailed when the authenticationToken does not exist.
Skipped|001|Browse: Should browse for a maximum of one reference.
Skipped|005|BrowseNext: Should browse for the next reference and release continuation points.
Skipped|006|BrowseNext: Should return a ContinuationPoint when ReleaseContinuationPoints is false and more references exist.
Skipped|007|BrowseNext: Should browse through to the last reference at which point the operation result should have StatusCode Good and 
Skipped|009|BrowseNext: Should return Inverse references when the direction is Inverse.
Skipped|010|BrowseNext: Should return references of the specified type when a ReferenceTypeId is specified and IncludeSubtypes is false.
Skipped|011|BrowseNext: Should return references of the specified type and its subtypes when a ReferenceTypeId is specified and IncludeSubtypes 
Skipped|013|BrowseNext: Should return requested result fields as specified by the ResultMask. 
Skipped|014|BrowseNext: Should return the number of references requested or the number remaining, whichever is fewer.
Skipped|015|BrowseNext: Should return Views when the NodeClassMask is set to include Views.
Skipped|002|BrowseNext: Should return operation result Bad_ContinuationPointInvalid when using a ContinuationPoint used in a previous 
Skipped|003|BrowseNext: Should return operation result Bad_ContinuationPointInvalid after releasing the ContinuationPoint.
Skipped|006|BrowseNext: Should return operation result Bad_ContinuationPointInvalid when the ContinuationPoint has already been used.
Skipped|008|BrowseNext: Should return service result Bad_SecurityChecksFailed when the AuthenticationToken is null.
Skipped|009|BrowseNext: Should return service result Bad_SecurityChecksFailed when the AuthenticationToken does not exist.
Skipped|010|BrowseNext: Should return service result Bad_InvalidTimestamp when RequestHeader.Timestamp is too far out of range.
Skipped|013|UnregisterNodes: Should return Good service result when unregistering 25 registered nodes.
Skipped|014|UnregisterNodes: Should return Good service result when unregistering 50 registered nodes.
Skipped|015|UnregisterNodes: Should return Good service result when unregistering 100 registered nodes.
Skipped|022|UnregisterNodes: Should return Good service result when unregistering multiple unregistered nodes.
Not supported|009|Write: Write a <null> to each data-type.
Not supported|001|Server node.
Not supported|004|FindServers: Repeat test in a loop of 100 iterations.
Not supported|001|FindServers: EndpointUrl = null.
Not supported|002|FindServers: Include AuthenticationToken in header.
Skipped|initialize|Security User Name Password
Not supported|003|CreateSession: Server diagnostics shows an entry for the client session (if supported).
Not supported|014|BrowseNext: Should return service result Bad_NothingToDo when there are no ContinuationPoints.
Not supported|016|BrowseNext: Should return requested diagnostics as specified by the diagnostic mask.
Not supported|017|BrowseNext: Should return no diagnostic info when the returnDiagnostics mask is 0.
Not supported|009|RegisterNodes: Should return diagnostic info as specified by the returnDiagnostics bit  mask.
Not supported|010|RegisterNodes: Should not return diagnostics when returnDiagnostics is 0.
Not supported|024|UnregisterNodes: Should return diagnostic info as specified by the returnDiagnostics bit  mask.
Not supported|025|UnregisterNodes: Should not return diagnostics when returnDiagnostics is 0.
Not supported|001|RegisterNodes: Should return Bad_NothingToDo when nodesToRegister[] is empty.
Skipped|initialize|View TranslateBrowsePath
