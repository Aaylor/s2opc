Skipped|022|Read: Arrays of each data type (basic types)
Skipped|023|Read: Arrays of each data-type to be read from multiple Nodes in a single call.
Skipped|024|Read: Arrays, read one node of each data type specifying an IndexRange retrieving 2nd element only.
Skipped|025|Read: Arrays of various data types from multiple Nodes (in a single call) using IndexRange 2-4.
Skipped|026|Read: Arrays of various data types from multiple Nodes (in a single call) using IndexRange 'last 3 items'.
Skipped|012|Read: IndexRange is out of bounds of the what the array supports. Each core data-type is tested. Expect "Bad_IndexRangeNoData.
Skipped|013|Read: IndexRange invalid syntax (negative number), for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|016|Read: a node that is write-only (and not readable)
Skipped|022|Read: IndexRange invalid syntax, for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|023|Read: IndexRange invalid syntax (both digits are same), for each data type. Expected operation result is Bad_IndexRangeInvalid.
Skipped|024|Read: IndexRange invalid (text is backwards) for each data-type.
Skipped|initialize|Attribute Write Index
Skipped|004|Write: AccessLevel = CurrentWrite. Expects "Good".
Skipped|007|Write: ByteString to a Byte[]. Expects success.
Skipped|009|Write: LocalizedText; write to all, some, and no parameters of this structure type.
Skipped|012|Write: Write() a value of NaN to all configured floating point numbers
Skipped|007|Write: to a node whose AccessLevel is Read Only. Expect Bad_NotWritable.
Skipped|015|Write: LocalizedText with non-existent Locale.
Skipped|001|Check ValueAsText property on ALL configured nodes
Skipped|009|GetEndpoints: Multi-homed with multiple names.
Skipped|010|FindServers: multi-homed PC returns endpoints based on IP/hostname filter.
Skipped|007|ActivateSession: Specify different user-credentials activating an already active session.
Skipped|010|ActivateSession: Specify user login credentials that do not have sufficient privileges.
Skipped|017|Browse: Should return references of node class View.
Skipped|019|Browse: Should return the Reference Description fields  specified by the ResultMask.
Skipped|009|BrowseNext: Should return Inverse references when the direction is Inverse.
Skipped|015|BrowseNext: Should return Views when the NodeClassMask is set to include Views.
Skipped|013|UnregisterNodes: Should return Good service result when unregistering 25 registered nodes.
Skipped|014|UnregisterNodes: Should return Good service result when unregistering 50 registered nodes.
Skipped|015|UnregisterNodes: Should return Good service result when unregistering 100 registered nodes.
Not supported|009|Write: Write a <null> to each data-type.
Not supported|001|Server node.
Not supported|004|FindServers: Repeat test in a loop of 100 iterations.
Not supported|001|FindServers: EndpointUrl = null.
Not supported|002|FindServers: Include AuthenticationToken in header.
Skipped|initialize|Security User Name Password
Not supported|003|CreateSession: Server diagnostics shows an entry for the client session (if supported).
Not supported|014|BrowseNext: Should return service result Bad_NothingToDo when there are no ContinuationPoints.
Not supported|016|BrowseNext: Should return requested diagnostics as specified by the diagnostic mask.
Not supported|017|BrowseNext: Should return no diagnostic info when the returnDiagnostics mask is 0.
Not supported|009|RegisterNodes: Should return diagnostic info as specified by the returnDiagnostics bit  mask.
Not supported|010|RegisterNodes: Should not return diagnostics when returnDiagnostics is 0.
Not supported|024|UnregisterNodes: Should return diagnostic info as specified by the returnDiagnostics bit  mask.
Not supported|025|UnregisterNodes: Should not return diagnostics when returnDiagnostics is 0.
Not supported|001|RegisterNodes: Should return Bad_NothingToDo when nodesToRegister[] is empty.
Not supported|009|RegisterNodes: Should return BadInvalidTimestamp when the RequestHeader.Timestamp is too far out of range.
Not supported|011|UnregisterNodes: Should return Bad_NothingToDo when there are no nodes to unregister.
Not supported|014|UnregisterNodes: Should return BadInvalidTimestamp when the RequestHeader.Timestamp is too far out of range.
Skipped|002|TranslateBrowsePathsToNodeIds: Should return good for matching browsePaths and bad for non-matching browsePaths.
Not supported|003|Empty request, expects Bad_NothingToDo.
Not supported|012|Translate: relativePath contains invalid NodeId for referenceTypeId.
Skipped|021|Test ServerCapabilities max operations-per-method for TranslateBrowsePathsToNodeIds.
Not supported|024|TranslateBrowsePathsToNodeIds: Should return BadInvalidTimestamp when the RequestHeader.Timestamp is too far out of range.
Not supported|001|CreateSubscription: Default parameter values.
Not supported|002|CreateSubscription: RequestedPublishingInterval is set to 1.
Not supported|022|CreateSubscription: 1 monitored item, various timing intervals checking for values.
Not supported|023|ModifySubscription: Default parameter values.
Not supported|024|ModifySubscription: RequestedPublishingInterval=7ms greater than RevisedPublishingInterval from CreateSubscription.
Not supported|025|ModifySubscription: RequestedPublishingInterval is 7ms less than RevisedPublishingInterval from CreateSubscription.
Not supported|026|ModifySubscription: RequestedPublishingInterval matches RevisedPublishingInterval from CreateSubscription.
Not supported|027|ModifySubscription: RequestedPublishingInterval=1; Server returns fastest possible value != 0.
Not supported|028|ModifySubscription: RequestedPublishingInterval=0; Server revises the value.
Not supported|029|ModifySubscription: RequestedPublishingInterval=Max Int32.
Not supported|042|Republish: requests are sent out-of-order.
Not supported|043|SetPublishingMode: Disables an enabled Subscription.
Not supported|044|SetPublishingMode: Enables a disabled subscription.
Not supported|045|SetPublishingMode: Enable an already enabled subscription.
Not supported|046|SetPublishingMode: Disable an already disabled subscription.
Not supported|047|SetPublishingMode: specify same subscription 5 times.
Not supported|048|SetPublishingMode: Specify the same subscriptionId multiple times.
Not supported|049|Publish: Default parameters.
Not supported|050|Publish: Acknowledge a valid sequence number from a valid subscription.
Not supported|051|Publish: Acknowldge multiple valid sequence numbers from a valid subscription.
Not supported|013|Publish: SubscriptionId=0; expect results[0] = Bad_SubscriptionIdInvalid.
Not supported|014|Publish: Acknowldge the same sequenceNumber twice, in the same call.
Not supported|015|Publish: Acknowledge same sequence number twice.
Not supported|016|Publish: Acknowledge multiple invalid SequenceNumbers, expect Results[*]=Bad_SequenceNumberUnknown.
Not supported|017|Publish: Acknowledge multiple invalid sequenceNumbers from multiple valid subscriptions.
Not supported|018|Republish: No subscription has been created.
Not supported|019|Republish: SubscriptionId = 0.
Not supported|020|Republish: Invalid subscriptionId.
Not supported|021|Republish: RetransmitSequenceNumber = 0.
Not supported|022|Republish: Invalid RetransmitSequenceNumber.
Not supported|023|Republish: Request an already-acknowledged SequenceNumber.
Not supported|024|Republish: Call Republish on a DELETED Subscription.
Not supported|001|Create one subscription. Acknowledge queued SequenceNumbers out of order.
Not supported|002|Create one subscription. Check it exists in Diagnostics.
Not supported|001|Queue 2 Publish() requests in a single session.
Not supported|004|Republish: MessageRetransmissionQueueSize expected to be 2.
Not supported|001|Queue more Publish() requests than the server can support.
Skipped|030|CreateMonitoredItems: ByteStringArray with IndexRange outside of bounds. Call Publish().
Not supported|003|ModifySubscription: check timings after modifying publishing interval.
