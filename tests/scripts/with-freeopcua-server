#!/usr/bin/env python3

# Copyright (C) 2018 Systerel and others.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys

import wait_server

def usage():
    sys.stderr.write('''Usage: %s CLIENT_TEST_NAME

Runs the given test against a FreeOPCUA test server running in the background.
CLIENT_TEST_NAME should be the name of a binary in the bin/ directory.
''' % sys.argv[0])

if __name__ == '__main__':
    cmd = sys.argv[1:]

    if not cmd:
        usage()
        sys.exit(1)

    script_dir = os.path.dirname(os.path.abspath(__file__))
    bin_dir = os.path.join(script_dir, '..', '..', 'bin')
    validation_tests_dir = os.path.join(script_dir, '..', '..', 'validation')
    test_server_bin = os.path.join(validation_tests_dir, 'server.py')
    validation_test_bin = os.path.join(validation_tests_dir, cmd[0])

    print('Starting server')
    server_process = subprocess.Popen([test_server_bin, '25000'], cwd=validation_tests_dir)

    if not wait_server.wait_server(wait_server.DEFAULT_URL, wait_server.TIMEOUT):
        print('Timeout for starting server')
        server_process.kill()
        server_process.wait()
        sys.exit(1)

    print('Starting test %s' % ' '.join(cmd))

    try:
        subprocess.check_call(cmd, cwd=bin_dir)
        test_ret = 0
    except subprocess.CalledProcessError as e:
        test_ret = e.returncode
    except FileNotFoundError:
        sys.stderr.write('%s: Not such file or directory\n' % validation_test_bin)
        test_ret = 127

    print('Test finished, killing server')

    server_process.terminate()
    server_ret = server_process.wait()

    print('Done')
    sys.exit(test_ret)

# vim: set et ts=4 sw=4:
