#!/usr/bin/env python3

# Copyright (C) 2018 Systerel and others.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import shlex
import subprocess
import sys

import wait_server

description = '''Runs a program with a test S2OPC server running in the
background.

The background server should listen on port 4841 to be considered as running by
this script.'''

def log(msg):
    print(msg)
    sys.stdout.flush()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--server-cmd', metavar='CMD', help='The command to start the background server')
    parser.add_argument('--server-wd', metavar='DIR', help='The directory to run the server in')
    parser.add_argument('--wait-server', action='store_true', default=False,
                        help='Wait for the server to exit instead of killing it when the client is done')
    parser.add_argument('cmd', metavar='CMD', help='The command to run')
    parser.add_argument('args', metavar='ARGS', nargs=argparse.REMAINDER,
                        help='Parameters to pass to the command')

    args = parser.parse_args()

    if args.server_cmd is None:
        sys.stderr.write('Missing server command.\n')
        sys.exit(1)

    log('Starting server')
    server_process = subprocess.Popen(shlex.split(args.server_cmd), cwd=args.server_wd)

    if not wait_server.wait_server(wait_server.DEFAULT_URL, wait_server.TIMEOUT):
        log('Timeout for starting server')
        server_process.kill()
        server_process.wait()
        sys.exit(1)

    cmd = [args.cmd] + args.args

    log('Starting test %s' % ' '.join(cmd))

    try:
        subprocess.check_call(cmd)
        test_ret = 0
    except subprocess.CalledProcessError as e:
        test_ret = e.returncode
    except FileNotFoundError as e:
        sys.stderr.write('%s: Not such file or directory\n' % e.filename)
        test_ret = 127

    if not args.wait_server:
        log('Test finished, killing server')
        server_process.terminate()

    log('Waiting for server to exit')
    server_ret = server_process.wait()

    log('Done')
    sys.exit(test_ret)

# vim: set et ts=4 sw=4:
