#!/usr/bin/env python3

# Copyright (C) 2018 Systerel and others.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import shlex
import subprocess
import sys

import wait_server

def usage():
    sys.stderr.write('''Usage: %s SERVER_TEST_NAME

Runs the given test against a toolkit test server running in the background.
SERVER_TEST_NAME should be the path to the test script.

The command to launch the server is set using the TEST_SERVER_CMD environment
variable. This command will be run from the bin/ folder. The server should
listen on port 4841 to be detected by the script.

If the TEST_SERVER_EXITS_ALONE environment variable is set, this script waits
for the server to exit indefinitely. Else, it sends it a SIGTERM signal once the
client is done and waits for the server to exit.
''' % sys.argv[0])

if __name__ == '__main__':
    cmd = sys.argv[1:]

    if not cmd:
        usage()
        sys.exit(1)

    script_dir = os.path.dirname(os.path.abspath(__file__))
    test_server_dir = os.path.join(script_dir, '..', '..', 'bin')
    test_server_cmd = os.getenv('TEST_SERVER_CMD')
    kill_server = (os.getenv('TEST_SERVER_EXITS_ALONE') is None)

    if test_server_cmd is None:
        sys.stderr.write('Missing server command. Set the TEST_SERVER_CMD environment variable.\n')
        sys.exit(1)

    print('Starting server')
    server_process = subprocess.Popen(shlex.split(test_server_cmd), cwd=test_server_dir)

    if not wait_server.wait_server(wait_server.DEFAULT_URL, wait_server.TIMEOUT):
        print('Timeout for starting server')
        server_process.kill()
        server_process.wait()
        sys.exit(1)

    print('Starting test %s' % ' '.join(cmd))

    try:
        subprocess.check_call(cmd)
        test_ret = 0
    except subprocess.CalledProcessError as e:
        test_ret = e.returncode
    except FileNotFoundError as e:
        sys.stderr.write('%s: Not such file or directory\n' % e.filename)
        test_ret = 127

    if kill_server:
        print('Test finished, killing server')
        server_process.terminate()

    print('Waiting for server to exit')
    server_ret = server_process.wait()

    print('Done')
    sys.exit(test_ret)

# vim: set et ts=4 sw=4:
